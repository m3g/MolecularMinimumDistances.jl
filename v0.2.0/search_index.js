var documenterSearchIndex = {"docs":
[{"location":"basic/#User-guide","page":"Basic use","title":"User guide","text":"","category":"section"},{"location":"advanced/#Advanced-usage","page":"Advanced use","title":"Advanced usage","text":"","category":"section"},{"location":"reference/#Citation","page":"Reference","title":"Citation","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"If this package was useful, please cite the article describing the main algorithms on which it is based:","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"L. Martínez (2022) CellListMap.jl: Efficient and customizable cell list implementation for calculation of pairwise particle properties within a cutoff. https://doi.org/10.48550/arXiv.2202.06427","category":"page"},{"location":"#MolecularMinimumDistances","page":"Home","title":"MolecularMinimumDistances","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package computes the minimum distance between molecules, which are represented as arrays of coordinates in two or three dimensions. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To understand the utility and purpose of this package, consider the image below:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: nearest.png)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, there is one blue molecule, with 6 atoms, and several red molecules, with 2 atoms each. The package has identified which are the molecules of the red set that have at leat one atom within a cutoff from the atoms of the blue molecule, and annotated the corresponding atoms and the distances.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fast cell-list approach, to compute minimum-distance for thousands, or millions of atoms. \nGeneral periodic boundary conditions supported. \nAdvanced mode for in-place calculations, for non-allocating iterative calls (for analysis of MD trajectories, for example).\nModes for the calculation of minimum-distances in sets of molecules.","category":"page"},{"location":"#Most-typical-use:-Understanding-solvation","page":"Home","title":"Most typical use: Understanding solvation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was designed as the backend for computing minimum distance distribution functions, which are useful for understanding solute-solvent interactions when the molecules have complex shapes. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The most typical scenario is that of a protein, or another macromolecule, in a box of solvent. For example, here we download a frame of a protein which was simulated in a mixture of water and TMAO: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> download( \"https://raw.githubusercontent.com/m3g/ComplexMixtures.jl/master/test/data/NAMD/structure.pdb\", \"/tmp/system.pdb\");\n\njulia> using PDBTools\n\njulia> system = readPDB(\"/tmp/system.pdb\")\n   Array{Atoms,1} with 62026 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n       2  HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n       3  HT2     ALA     A        1        1   -9.488  -13.913   -5.295  0.00  0.00     1    PROT         3\n                                                       ⋮ \n   62024  OH2    TIP3     C     9339    19638   13.485   -4.534  -34.438  0.00  1.00     1    WAT2     62024\n   62025   H1    TIP3     C     9339    19638   13.218   -3.647  -34.453  0.00  1.00     1    WAT2     62025\n   62026   H2    TIP3     C     9339    19638   12.618   -4.977  -34.303  0.00  1.00     1    WAT2     62026","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, we extract the protein coordinates, and the TMAO coordinates:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> xprot = coor(system,\"protein\")\n1463-element Vector{SVector{3, Float64}}:\n [-9.229, -14.861, -5.481]\n [-10.048, -15.427, -5.569]\n [-9.488, -13.913, -5.295]\n ⋮\n [6.408, -12.034, -8.343]\n [6.017, -10.967, -9.713]\n\njulia> xtmao = coor(system,\"resname TMAO\")\n2534-element Vector{SVector{3, Float64}}:\n [-23.532, -9.347, 19.545]\n [-23.567, -7.907, 19.381]\n [-22.498, -9.702, 20.497]\n ⋮\n [13.564, -16.517, 12.419]\n [12.4, -17.811, 12.052]","category":"page"},{"location":"","page":"Home","title":"Home","text":"The system was simulated with periodic boundary conditions, with sides in this frame of [83.115, 83.044, 83.063], and this information will be provided to the minimum-distance computation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, we find all the TMAO molecules having at least one atom closer than 12 Angstroms to the protein, using the current package (TMAO has 14 atoms):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> box = Box([83.115, 83.044, 83.063], 12.);\n\njulia> md = minimum_distances(xtmao, xprot, 14, box)\n181-element Vector{MinimumDistance{Float64}}:\n MinimumDistance{Float64}(false, -1, -1, Inf)\n MinimumDistance{Float64}(false, -1, -1, Inf)\n MinimumDistance{Float64}(false, -1, -1, Inf)\n ⋮\n MinimumDistance{Float64}(false, -1, -1, Inf)\n MinimumDistance{Float64}(true, 2526, 97, 9.652277658666891)\n\njulia> count(x -> x.within_cutoff, md)\n33","category":"page"},{"location":"","page":"Home","title":"Home","text":"Thus, 33 TMAO molecules are within the cutoff distance from the protein, and the distances can be used to study the solvation of the protein.","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package exists because this computation is fast. For example, let us choose the water molecules instead, and benchmark the time required to compute these set of distances:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> xwat = coor(system,\"resname TIP3\")\n58014-element Vector{SVector{3, Float64}}:\n [-28.223, 19.92, -27.748]\n [-27.453, 20.358, -27.476]\n [-27.834, 19.111, -28.148]\n ⋮\n [13.218, -3.647, -34.453]\n [12.618, -4.977, -34.303]\n\njulia> using BenchmarkTools\n\njulia> @btime minimum_distances($xwat, $xprot, 3, $box);\n  4.726 ms (2748 allocations: 11.82 MiB)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To compare, a naive algorithm to compute the same thing takes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @btime MolecularMinimumDistances.naive_md($xwat, $xprot, 3, $box);\n  911.580 ms (2 allocations: 604.36 KiB)","category":"page"},{"location":"","page":"Home","title":"Home","text":"And the computation can be made faster and in-place using the more advanced interface that allows preallocation of all necessary arrays:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> list = init_list(xwat, i -> mol_index(i,3)); # 3 atoms per molecule\n\njulia> cl = CellList(xwat,xprot,box);\n\njulia> minimum_distances!(i -> mol_index(i,3), list, box, cl)\n19338-element Vector{MinimumDistance{Float64}}:\n MinimumDistance{Float64}(false, -1, -1, Inf)\n MinimumDistance{Float64}(false, -1, -1, Inf)\n MinimumDistance{Float64}(false, -1, -1, Inf)\n ⋮\n MinimumDistance{Float64}(true, 58011, 383, 10.24673074692606)\n MinimumDistance{Float64}(false, -1, -1, Inf)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Allocations occur only for the launching of multiple threads:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @btime minimum_distances!(\n           $(i -> mol_index(i,3)), \n           $list, $box, $cl, \n           parallel = false\n        );\n  12.723 ms (0 allocations: 0 bytes)\n\njulia> @btime minimum_distances!(\n          $(i -> mol_index(i,3)), \n          $list, $box, $cl,\n          parallel = true # default\n        );\n  3.473 ms (135 allocations: 7.10 MiB)\n","category":"page"},{"location":"#Details-of-the-illustration","page":"Home","title":"Details of the illustration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The initial illustration here consists of a toy solute-solvent example, where the solute is a approximatelly hexagonal molecule, and the solvent is composed by 40 diatomic molecules. The toy system is built as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MolecularMinimumDistances, StaticArrays\n# x will contain the \"solvent\", composed by 40 diatomic molecules\nx = T[]\ncmin = T(-20,-20)\nfor i in 1:40\n    v = cmin .+ 40*rand(T)\n    push!(x, v)\n    theta = 2pi*rand()\n    push!(x, v .+ T(sin(theta),cos(theta)))\nend\n# y will contain the \"solute\", composed by an approximate hexagonal molecule\ny = [ T(1,1), T(1,-1), T(0,-1.5), T(-1,-1), T(-1,1), T(0,1.5) ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, we compute the minimum distances between each molecule of x (the solvent) and the solute. In the input we need to specify the number of atoms of each molecule in x, and the cutoff up to which we want the distances to be computed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> md = minimum_distances(x,y,2,10.0)\n40-element Vector{MinimumDistance{Float64}}:\n MinimumDistance{Float64}(true, 2, 3, 1.0764931248364737)\n MinimumDistance{Float64}(false, -1, -1, Inf)\n MinimumDistance{Float64}(false, -1, -1, Inf)\n ⋮\n MinimumDistance{Float64}(true, 74, 5, 7.899981412729262)\n MinimumDistance{Float64}(false, -1, -1, Inf)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The output is a list of MinimumDistance data structures, one for each molecule in x. The true indicates that a distance smaller than the cutoff was found, and for these the indexes of the atoms in x and y associated are reported, along with the distance between them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this example, from the 40 molecules of x, eleven had atoms closer than the cutoff to some atom of y:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> count(x -> x.within_cutoff, md)\n11","category":"page"},{"location":"","page":"Home","title":"Home","text":"We have an auxiliary function to plot the result, in this case where the \"atoms\" are bi-dimensional:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\nimport MolecularMinimumDistances: plot_md!\np = plot(lims=(-20,20),framestyle=:box,grid=false,aspect_ratio=1)\nplot_md!(p, x, 2, y, 6, md, y_cycle=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"will produce the illustration plot above, in which the nearest point between the two sets is identified.","category":"page"}]
}
